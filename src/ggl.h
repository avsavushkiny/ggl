/*
    [name]       Gray Graphic Library
    [chip]       ST75256 (display JLX256160-920)
    [resolution] 256x160
    [version]    2.0
    [create]     Alexander Savushkin
    [date]       02\03\2025
    [e-mail]     aeondc@gmail.com
    [github]     https://github.com/avsavushkiny/ggl
*/

#ifndef _GGL_
#define _GGL_

#include <SPI.h>
#include <Arduino.h>
#include <stdint.h>
#include <stdio.h>

extern int _WIDTH;
extern int _HEIGHT;
extern int _DISPLAY_ROTATE;

#define ROTATE_0       0
#define ROTATE_90      1
#define ROTATE_180     2
#define ROTATE_270     3

#define swapxy(a, b) { int16_t t = a; a = b; b = t; }

class GRAY
{
public:
    enum Color
    {
        BLACK,
        DARK_GRAY,
        LIGHT_GRAY,
        WHITE
    };

    void begin();
    void display();
    void clear();
    void sendBuffer(); 
    void clearBuffer();

    void pixel(int x, int y, char color);
    void bitmap(int x,int y,const uint8_t *pBmp, int chWidth, int chHeight);

    void writeChar(short x, short y, char acsii, char size, char mode, Color color);
    void writeString(int x, int y, const char *pString, int Size, int Mode, Color color);
    void writeString(int x, int y, const String &text, int Size, int Mode, Color color);

    /* Draw gray-mode */
    void drawPixel(int x, int y, Color color);
    void drawFillFrame(int x, int y, int w, int h, Color borderColor, Color fillColor);
    void drawFrame(int x, int y, int w, int h, Color borderColor);
    void drawRoundedFrame(int x, int y, int w, int h, int r, Color borderColor, Color fillColor);
    void drawFillCircle(int x0, int y0, int r, Color borderColor, Color fillColor);
    void drawCircle(int x0, int y0, int r, Color color);
    void drawTriangle(int x0, int y0, int x1, int y1, int x2, int y2, Color borderColor, Color fillColor);
    void drawHLine(int x, int y, int length, Color color, int w);
    void drawVLine(int x, int y, int length, Color color, int w);
    void drawBox(int x, int y, int w, int h, Color fillColor);
    void drawLine(int x0, int y0, int x1, int y1, Color color);
    void drawSine(uint16_t y, uint16_t a, uint16_t n, Color color);

    void drawTable(int x, int y, int rows, int cols, int cellWidth, int cellHeight, const char* data, Color borderColor, Color textColor, Color bgColor);
private:
    /* chip ESP32 SPI hardware */
    const uint8_t LCD_BL{0};
    const uint8_t LCD_DC{17};
    const uint8_t LCD_RST{16};
    const uint8_t LCD_CS{5};
    const uint8_t LCD_SCK{18};
    const uint8_t LCD_MOSI{23};

    void rotate(int ROTATE);
    void transferCommand(int cmd);
    void transferData(int dat);
    void SPIWrite_byte(int dat);
};

// class MONOCHROME
// {
// public:
//     /* setup display */
//     void begin();
//     void display();

//     void clear();
//     void pixel(int x, int y, char color);
//     void bitmap(int x, int y, const int *pBmp, int chWidth, int chHeight);

//     void drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
//     void drawCircleHelper( int16_t x0, int16_t y0,int16_t r, int cornername, uint16_t color);
//     void drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1,uint16_t color);
//     void drawRect(int16_t x, int16_t y,int16_t w, int16_t h,uint16_t color);
//     void drawFastVLine(int16_t x, int16_t y,int16_t h, uint16_t color);
//     void drawFastHLine(int16_t x, int16_t y,int16_t w, uint16_t color);
//     void drawRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color);
//     void drawTriangle(int16_t x0, int16_t y0,int16_t x1, int16_t y1,int16_t x2, int16_t y2, uint16_t color);

//     void drawFillCircle(int16_t x0, int16_t y0, int16_t r,uint16_t color);
//     void drawFillCircleHelper(int16_t x0, int16_t y0, int16_t r,int cornername, int16_t delta, uint16_t color);
//     void drawFillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color);
//     void drawFillRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color);
//     void drawFillTriangle(int16_t x0, int16_t y0,int16_t x1, int16_t y1,int16_t x2, int16_t y2, uint16_t color);

//     /* copies of methods from the u8g2 library */
//     void clearBuffer();
//     void drawGrayBMP(int16_t x, int16_t y, int16_t w, int16_t h, const uint8_t *bitmap);
//     void drawXBMP(int16_t x, int16_t y, int16_t w, int16_t h, const uint8_t *bitmap);
// private:
//     /* chip ESP32 SPI hardware */
//     const uint8_t LCD_BL{0};
//     const uint8_t LCD_DC{17};
//     const uint8_t LCD_RST{16};
//     const uint8_t LCD_CS{5};
//     const uint8_t LCD_SCK{18};
//     const uint8_t LCD_MOSI{23};

//     void rotate(int ROTATE);
//     void transferCommand(int cmd);
//     void transferData(int dat);
//     void SPIWrite_byte(int dat);
// };

class GGL
{
private:
    // /* chip ESP32 SPI hardware */
    // const uint8_t LCD_BL{0};
    // const uint8_t LCD_DC{17};
    // const uint8_t LCD_RST{16};
    // const uint8_t LCD_CS{5};
    // const uint8_t LCD_SCK{18};
    // const uint8_t LCD_MOSI{23};

    // void rotate(int ROTATE);
    // void transferCommand(int cmd);
    // void transferData(int dat);
    // void SPIWrite_byte(int dat);

public:
    GRAY gray;
    // MONOCHROME Monochrome;

    // enum Color
    // {
    //     BLACK,
    //     DARK_GRAY,
    //     LIGHT_GRAY,
    //     WHITE
    // };
    // /* setup display */
    // void begin();
    // void display();
    /* write bitmap-data */
    // void clear();
    // void pixel(int x, int y, char color);
    // void bitmap(int x, int y, const int *pBmp, int chWidth, int chHeight);
    // void pixelGray(int x, int y, char color);
    // void displayGray();
    // void sendGrayBuffer();
    // void bitmapGray(int x,int y,const uint8_t *pBmp, int chWidth, int chHeight);
    // /* write data */
    // void writeChar(unsigned char x, unsigned char y, char acsii, char size, char mode);
    // void writeChar1616(int x,int y,int chChar);
    // void writeChar3216(int x, int y, int chChar);
    // void writeString(int x, int y, String str, int Size, int Mode);
    
    // /* Gray mode */
    // void writeGrayChar(short x, short y, char acsii, char size, char mode, Color color);
    // void writeGrayString(int x, int y, const char *pString, int Size, int Mode, Color color);
    // void writeGrayString(int x, int y, const String &text, int Size, int Mode, Color color);

    // /* Draw gray-mode */
    // void drawGrayPixel(int x, int y, Color color);
    // void drawGrayFillFrame(int x, int y, int w, int h, Color borderColor, Color fillColor);
    // void drawGrayFrame(int x, int y, int w, int h, Color borderColor);
    // void drawGrayRoundedFrame(int x, int y, int w, int h, int r, Color borderColor, Color fillColor);
    // void drawGrayFillCircle(int x0, int y0, int r, Color borderColor, Color fillColor);
    // void drawGrayCircle(int x0, int y0, int r, Color color);
    // void drawGrayTriangle(int x0, int y0, int x1, int y1, int x2, int y2, Color borderColor, Color fillColor);
    // void drawGrayHLine(int x, int y, int length, Color color, int w);
    // void drawGrayVLine(int x, int y, int length, Color color, int w);
    // void drawGrayBox(int x, int y, int w, int h, Color fillColor);
    // void drawGrayLine(int x0, int y0, int x1, int y1, Color color);
    // void drawGraySine(uint16_t y, uint16_t a, uint16_t n, Color color);

    // /* Draw Table */
    // void drawGrayTable(int x, int y, int rows, int cols, int cellWidth, int cellHeight, const char* data, Color borderColor, Color textColor, Color bgColor);
    
    // // Draw
    // void drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
    // void drawCircleHelper( int16_t x0, int16_t y0,int16_t r, int cornername, uint16_t color);
    // void drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1,uint16_t color);
    // void drawRect(int16_t x, int16_t y,int16_t w, int16_t h,uint16_t color);
    // void drawFastVLine(int16_t x, int16_t y,int16_t h, uint16_t color);
    // void drawFastHLine(int16_t x, int16_t y,int16_t w, uint16_t color);
    // void drawRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color);
    // void drawTriangle(int16_t x0, int16_t y0,int16_t x1, int16_t y1,int16_t x2, int16_t y2, uint16_t color);

    // void drawFillCircle(int16_t x0, int16_t y0, int16_t r,uint16_t color);
    // void drawFillCircleHelper(int16_t x0, int16_t y0, int16_t r,int cornername, int16_t delta, uint16_t color);
    // void drawFillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color);
    // void drawFillRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color);
    // void drawFillTriangle(int16_t x0, int16_t y0,int16_t x1, int16_t y1,int16_t x2, int16_t y2, uint16_t color);

    // /* copies of methods from the u8g2 library */
    // void clearBuffer();
    // void drawGrayBMP(int16_t x, int16_t y, int16_t w, int16_t h, const uint8_t *bitmap);
    // void drawXBMP(int16_t x, int16_t y, int16_t w, int16_t h, const uint8_t *bitmap);
};

/* Fonts */
const int Font1612[11][32]  = 
{
	{0x00,0x00,0x3F,0xFC,0x3F,0xFC,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,
	0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"0",0*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,
	0x30,0x00,0x3F,0xFC,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"1",1*/
	{0x00,0x00,0x39,0xFC,0x39,0xFC,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x3F,0x8C,0x3F,0x8C,0x00,0x00},/*"2",2*/
	{0x00,0x00,0x38,0x1C,0x38,0x1C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"3",3*/
	{0x00,0x00,0x3F,0x80,0x3F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
	0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"4",4*/
	{0x00,0x00,0x3F,0x8C,0x3F,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0xFC,0x31,0xFC,0x00,0x00},/*"5",5*/
	{0x00,0x00,0x3F,0xFC,0x3F,0xFC,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0xFC,0x31,0xFC,0x00,0x00},/*"6",6*/
	{0x00,0x00,0x38,0x00,0x38,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
	0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"7",7*/
	{0x00,0x00,0x3F,0xFC,0x3F,0xFC,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"8",8*/
	{0x00,0x00,0x3F,0x9C,0x3F,0x9C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,
	0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x3F,0xFC,0x3F,0xFC,0x00,0x00},/*"9",9*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x30,
	0x18,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*":",10*/
};

const int Font1006[95][20] = { // vertical scan
    {},/*" ",0*/
    {},/*"!",1*/
    {},/*""",2*/
    {},/*"#",3*/
    {},/*"$",4*/
    {},/*"%",5*/
    {},/*"&",6*/
    {},/*"'",7*/
    {0X00,0X00,0X00,0X00,0X1E,0X00,0X21,0X00,0X40,0X80,0X00,0X00},/*"(",8*/
    {0X40,0X80,0X21,0X00,0X1E,0X00,0X00,0X00,0X00,0X00,0X00,0X00},/*")",9*/
    {0X00,0X00,0X50,0X00,0X20,0X00,0X50,0X00,0X00,0X00,0X00,0X00},/*"*",10*/
    {0X04,0X00,0X04,0X00,0X1F,0X00,0X04,0X00,0X04,0X00,0X00,0X00},/*"+",11*/
    {0X00,0X00,0X01,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00},/*",",12*/
    {0X04,0X00,0X04,0X00,0X04,0X00,0X04,0X00,0X04,0X00,0X00,0X00},/*"-",13*/
    {0X00,0X00,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00},/*".",14*/
    {0X00,0X00,0X01,0X00,0X06,0X00,0X18,0X00,0X20,0X00,0X00,0X00},/*"/",15*/
    {0X3E,0X00,0X51,0X00,0X49,0X00,0X45,0X00,0X3E,0X00,0X00,0X00},/*"0",16*/
    {0X09,0X00,0X11,0X00,0X7F,0X00,0X01,0X00,0X01,0X00,0X00,0X00},/*"1",17*/
    {0X23,0X00,0X45,0X00,0X45,0X00,0X45,0X00,0X39,0X00,0X00,0X00},/*"2",18*/
    {0X22,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X36,0X00,0X00,0X00},/*"3",19*/
    {0X0C,0X00,0X14,0X00,0X24,0X00,0X7F,0X00,0X04,0X00,0X00,0X00},/*"4",20*/
    {0X7A,0X00,0X51,0X00,0X51,0X00,0X51,0X00,0X4E,0X00,0X00,0X00},/*"5",21*/
    {0X3E,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X26,0X00,0X00,0X00},/*"6",22*/
    {0X41,0X00,0X42,0X00,0X44,0X00,0X48,0X00,0X70,0X00,0X00,0X00},/*"7",23*/
    {0X36,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X36,0X00,0X00,0X00},/*"8",24*/
    {0X32,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X3E,0X00,0X00,0X00},/*"9",25*/
    {},/*":",26*/
    {},/*";",27*/
    {},/*"<",28*/
    {},/*"=",29*/
    {},/*">",30*/
    {},/*"?",31*/
    {},/*"@",32*/
    {0X1F,0X00,0X24,0X00,0X44,0X00,0X24,0X00,0X1F,0X00,0X00,0X00},/*"A",33*/
    {0X41,0X00,0X7F,0X00,0X49,0X00,0X49,0X00,0X36,0X00,0X00,0X00},/*"B",34*/
    {0X3E,0X00,0X41,0X00,0X41,0X00,0X41,0X00,0X22,0X00,0X00,0X00},/*"C",35*/
    {0X41,0X00,0X7F,0X00,0X41,0X00,0X41,0X00,0X3E,0X00,0X00,0X00},/*"D",36*/
    {0X7F,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X41,0X00,0X00,0X00},/*"E",37*/
    {0X7F,0X00,0X48,0X00,0X48,0X00,0X48,0X00,0X40,0X00,0X00,0X00},/*"F",38*/
    {0X3E,0X00,0X41,0X00,0X41,0X00,0X45,0X00,0X26,0X00,0X00,0X00},/*"G",39*/
    {0X7F,0X00,0X08,0X00,0X08,0X00,0X08,0X00,0X7F,0X00,0X00,0X00},/*"H",40*/
    {0X00,0X00,0X41,0X00,0X7F,0X00,0X41,0X00,0X00,0X00,0X00,0X00},/*"I",41*/
    {0X02,0X00,0X01,0X00,0X41,0X00,0X7E,0X00,0X40,0X00,0X00,0X00},/*"J",42*/
    {0X7F,0X00,0X08,0X00,0X14,0X00,0X22,0X00,0X41,0X00,0X00,0X00},/*"K",43*/
    {0X7F,0X00,0X01,0X00,0X01,0X00,0X01,0X00,0X01,0X00,0X00,0X00},/*"L",44*/
    {0X7F,0X00,0X10,0X00,0X0C,0X00,0X10,0X00,0X7F,0X00,0X00,0X00},/*"M",45*/
    {0X7F,0X00,0X10,0X00,0X08,0X00,0X04,0X00,0X7F,0X00,0X00,0X00},/*"N",46*/
    {0X3E,0X00,0X41,0X00,0X41,0X00,0X41,0X00,0X3E,0X00,0X00,0X00},/*"O",47*/
    {0X7F,0X00,0X48,0X00,0X48,0X00,0X48,0X00,0X30,0X00,0X00,0X00},/*"P",48*/
    {0X3E,0X00,0X41,0X00,0X43,0X00,0X41,0X00,0X3E,0X80,0X00,0X00},/*"Q",49*/
    {0X7F,0X00,0X48,0X00,0X4C,0X00,0X4A,0X00,0X31,0X00,0X00,0X00},/*"R",50*/
    {0X32,0X00,0X49,0X00,0X49,0X00,0X49,0X00,0X26,0X00,0X00,0X00},/*"S",51*/
    {0X40,0X00,0X40,0X00,0X7F,0X00,0X40,0X00,0X40,0X00,0X00,0X00},/*"T",52*/
    {0X7E,0X00,0X01,0X00,0X01,0X00,0X01,0X00,0X7E,0X00,0X00,0X00},/*"U",53*/
    {0X70,0X00,0X0E,0X00,0X01,0X00,0X0E,0X00,0X70,0X00,0X00,0X00},/*"V",54*/
    {0X7F,0X00,0X02,0X00,0X0C,0X00,0X02,0X00,0X7F,0X00,0X00,0X00},/*"W",55*/
    {0X63,0X00,0X14,0X00,0X08,0X00,0X14,0X00,0X63,0X00,0X00,0X00},/*"X",56*/
    {0X60,0X00,0X10,0X00,0X0F,0X00,0X10,0X00,0X60,0X00,0X00,0X00},/*"Y",57*/
    {0X43,0X00,0X45,0X00,0X49,0X00,0X51,0X00,0X61,0X00,0X00,0X00},/*"Z",58*/
    {},/*"[",59*/
    {},/*"\",60*/
    {},/*"]",61*/
    {},/*"^",62*/
    {},/*"_",63*/
    {},/*"`",64*/
    {0X02,0X00,0X15,0X00,0X15,0X00,0X15,0X00,0X0F,0X00,0X00,0X00},/*"a",65*/
    {0X7F,0X00,0X0A,0X00,0X11,0X00,0X11,0X00,0X0E,0X00,0X00,0X00},/*"b",66*/
    {0X0E,0X00,0X11,0X00,0X11,0X00,0X11,0X00,0X0A,0X00,0X00,0X00},/*"c",67*/
    {0X0E,0X00,0X11,0X00,0X11,0X00,0X0A,0X00,0X7F,0X00,0X00,0X00},/*"d",68*/
    {0X0E,0X00,0X15,0X00,0X15,0X00,0X15,0X00,0X0C,0X00,0X00,0X00},/*"e",69*/
    {0X08,0X00,0X3F,0X00,0X48,0X00,0X48,0X00,0X20,0X00,0X00,0X00},/*"f",70*/
    {0X0C,0X80,0X12,0X40,0X12,0X40,0X12,0X40,0X0F,0X80,0X00,0X00},/*"g",71*/
    {0X7F,0X00,0X08,0X00,0X10,0X00,0X10,0X00,0X0F,0X00,0X00,0X00},/*"h",72*/
    {0X00,0X00,0X11,0X00,0X5F,0X00,0X01,0X00,0X00,0X00,0X00,0X00},/*"i",73*/
    {0X01,0X80,0X00,0X40,0X10,0X40,0X5F,0X80,0X00,0X00,0X00,0X00},/*"j",74*/
    {0X7F,0X00,0X04,0X00,0X04,0X00,0X0A,0X00,0X11,0X00,0X00,0X00},/*"k",75*/
    {0X00,0X00,0X41,0X00,0X7F,0X00,0X01,0X00,0X00,0X00,0X00,0X00},/*"l",76*/
    {0X0F,0X00,0X10,0X00,0X0E,0X00,0X10,0X00,0X0F,0X00,0X00,0X00},/*"m",77*/
    {0X1F,0X00,0X08,0X00,0X10,0X00,0X10,0X00,0X0F,0X00,0X00,0X00},/*"n",78*/
    {0X0E,0X00,0X11,0X00,0X11,0X00,0X11,0X00,0X0E,0X00,0X00,0X00},/*"o",79*/
    {0X1F,0XC0,0X0A,0X00,0X11,0X00,0X11,0X00,0X0E,0X00,0X00,0X00},/*"p",80*/
    {0X0E,0X00,0X11,0X00,0X11,0X00,0X0A,0X00,0X1F,0XC0,0X00,0X00},/*"q",81*/
    {0X1F,0X00,0X08,0X00,0X10,0X00,0X10,0X00,0X08,0X00,0X00,0X00},/*"r",82*/
    {0X09,0X00,0X15,0X00,0X15,0X00,0X15,0X00,0X12,0X00,0X00,0X00},/*"s",83*/
    {0X10,0X00,0X7E,0X00,0X11,0X00,0X01,0X00,0X02,0X00,0X00,0X00},/*"t",84*/
    {0X1E,0X00,0X01,0X00,0X01,0X00,0X02,0X00,0X1F,0X00,0X00,0X00},/*"u",85*/
    {0X18,0X00,0X06,0X00,0X01,0X00,0X06,0X00,0X18,0X00,0X00,0X00},/*"v",86*/
    {0X1E,0X00,0X01,0X00,0X06,0X00,0X01,0X00,0X1E,0X00,0X00,0X00},/*"w",87*/
    {0X11,0X00,0X0A,0X00,0X04,0X00,0X0A,0X00,0X11,0X00,0X00,0X00},/*"x",88*/
    {0X1C,0X80,0X02,0X40,0X02,0X40,0X04,0X40,0X1F,0X80,0X00,0X00},/*"y",89*/
    {0X11,0X00,0X13,0X00,0X15,0X00,0X19,0X00,0X11,0X00,0X00,0X00},/*"z",90*/
    {},/*"{",91*/
    {},/*"|",92*/
    {},/*"}",93*/
    {},/*"~",94*/
};

const int Font1206[95][24]  = {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
    {0x00,0x00,0x00,0x00,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
    {0x00,0x00,0x30,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00},/*""",2*/
    {0x09,0x00,0x0B,0xC0,0x3D,0x00,0x0B,0xC0,0x3D,0x00,0x09,0x00},/*"#",3*/
    {0x18,0xC0,0x24,0x40,0x7F,0xE0,0x22,0x40,0x31,0x80,0x00,0x00},/*"$",4*/
    {0x18,0x00,0x24,0xC0,0x1B,0x00,0x0D,0x80,0x32,0x40,0x01,0x80},/*"%",5*/
    {0x03,0x80,0x1C,0x40,0x27,0x40,0x1C,0x80,0x07,0x40,0x00,0x40},/*"&",6*/
    {0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x20,0x40,0x40,0x20},/*"(",8*/
    {0x00,0x00,0x40,0x20,0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00},/*")",9*/
    {0x09,0x00,0x06,0x00,0x1F,0x80,0x06,0x00,0x09,0x00,0x00,0x00},/*"*",10*/
    {0x04,0x00,0x04,0x00,0x3F,0x80,0x04,0x00,0x04,0x00,0x00,0x00},/*"+",11*/
    {0x00,0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*",",12*/
    {0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00},/*"-",13*/
    {0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
    {0x00,0x20,0x01,0xC0,0x06,0x00,0x38,0x00,0x40,0x00,0x00,0x00},/*"/",15*/
    {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"0",16*/
    {0x00,0x00,0x10,0x40,0x3F,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*"1",17*/
    {0x18,0xC0,0x21,0x40,0x22,0x40,0x24,0x40,0x18,0x40,0x00,0x00},/*"2",18*/
    {0x10,0x80,0x20,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"3",19*/
    {0x02,0x00,0x0D,0x00,0x11,0x00,0x3F,0xC0,0x01,0x40,0x00,0x00},/*"4",20*/
    {0x3C,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x23,0x80,0x00,0x00},/*"5",21*/
    {0x1F,0x80,0x24,0x40,0x24,0x40,0x34,0x40,0x03,0x80,0x00,0x00},/*"6",22*/
    {0x30,0x00,0x20,0x00,0x27,0xC0,0x38,0x00,0x20,0x00,0x00,0x00},/*"7",23*/
    {0x1B,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"8",24*/
    {0x1C,0x00,0x22,0xC0,0x22,0x40,0x22,0x40,0x1F,0x80,0x00,0x00},/*"9",25*/
    {0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
    {0x00,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0x00,0x00,0x00,0x00},/*";",27*/
    {0x00,0x00,0x04,0x00,0x0A,0x00,0x11,0x00,0x20,0x80,0x40,0x40},/*"<",28*/
    {0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x00,0x00},/*"=",29*/
    {0x00,0x00,0x40,0x40,0x20,0x80,0x11,0x00,0x0A,0x00,0x04,0x00},/*">",30*/
    {0x18,0x00,0x20,0x00,0x23,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*"?",31*/
    {0x1F,0x80,0x20,0x40,0x27,0x40,0x29,0x40,0x1F,0x40,0x00,0x00},/*"@",32*/
    {0x00,0x40,0x07,0xC0,0x39,0x00,0x0F,0x00,0x01,0xC0,0x00,0x40},/*"A",33*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"B",34*/
    {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x30,0x80,0x00,0x00},/*"C",35*/
    {0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"D",36*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x40,0x30,0xC0,0x00,0x00},/*"E",37*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x00,0x30,0x00,0x00,0x00},/*"F",38*/
    {0x0F,0x00,0x10,0x80,0x20,0x40,0x22,0x40,0x33,0x80,0x02,0x00},/*"G",39*/
    {0x20,0x40,0x3F,0xC0,0x04,0x00,0x04,0x00,0x3F,0xC0,0x20,0x40},/*"H",40*/
    {0x20,0x40,0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x00,0x00},/*"I",41*/
    {0x00,0x60,0x20,0x20,0x20,0x20,0x3F,0xC0,0x20,0x00,0x20,0x00},/*"J",42*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x0B,0x00,0x30,0xC0,0x20,0x40},/*"K",43*/
    {0x20,0x40,0x3F,0xC0,0x20,0x40,0x00,0x40,0x00,0x40,0x00,0xC0},/*"L",44*/
    {0x3F,0xC0,0x3C,0x00,0x03,0xC0,0x3C,0x00,0x3F,0xC0,0x00,0x00},/*"M",45*/
    {0x20,0x40,0x3F,0xC0,0x0C,0x40,0x23,0x00,0x3F,0xC0,0x20,0x00},/*"N",46*/
    {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"O",47*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*"P",48*/
    {0x1F,0x80,0x21,0x40,0x21,0x40,0x20,0xE0,0x1F,0xA0,0x00,0x00},/*"Q",49*/
    {0x20,0x40,0x3F,0xC0,0x24,0x40,0x26,0x00,0x19,0xC0,0x00,0x40},/*"R",50*/
    {0x18,0xC0,0x24,0x40,0x24,0x40,0x22,0x40,0x31,0x80,0x00,0x00},/*"S",51*/
    {0x30,0x00,0x20,0x40,0x3F,0xC0,0x20,0x40,0x30,0x00,0x00,0x00},/*"T",52*/
    {0x20,0x00,0x3F,0x80,0x00,0x40,0x00,0x40,0x3F,0x80,0x20,0x00},/*"U",53*/
    {0x20,0x00,0x3E,0x00,0x01,0xC0,0x07,0x00,0x38,0x00,0x20,0x00},/*"V",54*/
    {0x38,0x00,0x07,0xC0,0x3C,0x00,0x07,0xC0,0x38,0x00,0x00,0x00},/*"W",55*/
    {0x20,0x40,0x39,0xC0,0x06,0x00,0x39,0xC0,0x20,0x40,0x00,0x00},/*"X",56*/
    {0x20,0x00,0x38,0x40,0x07,0xC0,0x38,0x40,0x20,0x00,0x00,0x00},/*"Y",57*/
    {0x30,0x40,0x21,0xC0,0x26,0x40,0x38,0x40,0x20,0xC0,0x00,0x00},/*"Z",58*/
    {0x00,0x00,0x00,0x00,0x7F,0xE0,0x40,0x20,0x40,0x20,0x00,0x00},/*"[",59*/
    {0x00,0x00,0x70,0x00,0x0C,0x00,0x03,0x80,0x00,0x40,0x00,0x00},/*"\",60*/
    {0x00,0x00,0x40,0x20,0x40,0x20,0x7F,0xE0,0x00,0x00,0x00,0x00},/*"]",61*/
    {0x00,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
    {0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10},/*"_",63*/
    {0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
    {0x00,0x00,0x02,0x80,0x05,0x40,0x05,0x40,0x03,0xC0,0x00,0x40},/*"a",65*/
    {0x20,0x00,0x3F,0xC0,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*"b",66*/
    {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x06,0x40,0x00,0x00},/*"c",67*/
    {0x00,0x00,0x03,0x80,0x04,0x40,0x24,0x40,0x3F,0xC0,0x00,0x40},/*"d",68*/
    {0x00,0x00,0x03,0x80,0x05,0x40,0x05,0x40,0x03,0x40,0x00,0x00},/*"e",69*/
    {0x00,0x00,0x04,0x40,0x1F,0xC0,0x24,0x40,0x24,0x40,0x20,0x00},/*"f",70*/
    {0x00,0x00,0x02,0xE0,0x05,0x50,0x05,0x50,0x06,0x50,0x04,0x20},/*"g",71*/
    {0x20,0x40,0x3F,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*"h",72*/
    {0x00,0x00,0x04,0x40,0x27,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*"i",73*/
    {0x00,0x10,0x00,0x10,0x04,0x10,0x27,0xE0,0x00,0x00,0x00,0x00},/*"j",74*/
    {0x20,0x40,0x3F,0xC0,0x01,0x40,0x07,0x00,0x04,0xC0,0x04,0x40},/*"k",75*/
    {0x20,0x40,0x20,0x40,0x3F,0xC0,0x00,0x40,0x00,0x40,0x00,0x00},/*"l",76*/
    {0x07,0xC0,0x04,0x00,0x07,0xC0,0x04,0x00,0x03,0xC0,0x00,0x00},/*"m",77*/
    {0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*"n",78*/
    {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*"o",79*/
    {0x04,0x10,0x07,0xF0,0x04,0x50,0x04,0x40,0x03,0x80,0x00,0x00},/*"p",80*/
    {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x50,0x07,0xF0,0x00,0x10},/*"q",81*/
    {0x04,0x40,0x07,0xC0,0x02,0x40,0x04,0x00,0x04,0x00,0x00,0x00},/*"r",82*/
    {0x00,0x00,0x06,0x40,0x05,0x40,0x05,0x40,0x04,0xC0,0x00,0x00},/*"s",83*/
    {0x00,0x00,0x04,0x00,0x1F,0x80,0x04,0x40,0x00,0x40,0x00,0x00},/*"t",84*/
    {0x04,0x00,0x07,0x80,0x00,0x40,0x04,0x40,0x07,0xC0,0x00,0x40},/*"u",85*/
    {0x04,0x00,0x07,0x00,0x04,0xC0,0x01,0x80,0x06,0x00,0x04,0x00},/*"v",86*/
    {0x06,0x00,0x01,0xC0,0x07,0x00,0x01,0xC0,0x06,0x00,0x00,0x00},/*"w",87*/
    {0x04,0x40,0x06,0xC0,0x01,0x00,0x06,0xC0,0x04,0x40,0x00,0x00},/*"x",88*/
    {0x04,0x10,0x07,0x10,0x04,0xE0,0x01,0x80,0x06,0x00,0x04,0x00},/*"y",89*/
    {0x00,0x00,0x04,0x40,0x05,0xC0,0x06,0x40,0x04,0x40,0x00,0x00},/*"z",90*/
    {0x00,0x00,0x00,0x00,0x04,0x00,0x7B,0xE0,0x40,0x20,0x00,0x00},/*"{",91*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00},/*"|",92*/
    {0x00,0x00,0x40,0x20,0x7B,0xE0,0x04,0x00,0x00,0x00,0x00,0x00},/*"}",93*/
    {0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x40,0x00},/*"~",94*/
}; 

const int Font1608[95][16]  = {      
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xCC,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
    {0x00,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x00,0x00},/*""",2*/
    {0x02,0x20,0x03,0xFC,0x1E,0x20,0x02,0x20,0x03,0xFC,0x1E,0x20,0x02,0x20,0x00,0x00},/*"#",3*/
    {0x00,0x00,0x0E,0x18,0x11,0x04,0x3F,0xFF,0x10,0x84,0x0C,0x78,0x00,0x00,0x00,0x00},/*"$",4*/
    {0x0F,0x00,0x10,0x84,0x0F,0x38,0x00,0xC0,0x07,0x78,0x18,0x84,0x00,0x78,0x00,0x00},/*"%",5*/
    {0x00,0x78,0x0F,0x84,0x10,0xC4,0x11,0x24,0x0E,0x98,0x00,0xE4,0x00,0x84,0x00,0x08},/*"&",6*/
    {0x08,0x00,0x68,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x18,0x18,0x20,0x04,0x40,0x02,0x00,0x00},/*"(",8*/
    {0x00,0x00,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*")",9*/
    {0x02,0x40,0x02,0x40,0x01,0x80,0x0F,0xF0,0x01,0x80,0x02,0x40,0x02,0x40,0x00,0x00},/*"*",10*/
    {0x00,0x80,0x00,0x80,0x00,0x80,0x0F,0xF8,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},/*"+",11*/
    {0x00,0x01,0x00,0x0D,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*",",12*/
    {0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},/*"-",13*/
    {0x00,0x00,0x00,0x0C,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
    {0x00,0x00,0x00,0x06,0x00,0x18,0x00,0x60,0x01,0x80,0x06,0x00,0x18,0x00,0x20,0x00},/*"/",15*/
    {0x00,0x00,0x07,0xF0,0x08,0x08,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"0",16*/
    {0x00,0x00,0x08,0x04,0x08,0x04,0x1F,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"1",17*/
    {0x00,0x00,0x0E,0x0C,0x10,0x14,0x10,0x24,0x10,0x44,0x11,0x84,0x0E,0x0C,0x00,0x00},/*"2",18*/
    {0x00,0x00,0x0C,0x18,0x10,0x04,0x11,0x04,0x11,0x04,0x12,0x88,0x0C,0x70,0x00,0x00},/*"3",19*/
    {0x00,0x00,0x00,0xE0,0x03,0x20,0x04,0x24,0x08,0x24,0x1F,0xFC,0x00,0x24,0x00,0x00},/*"4",20*/
    {0x00,0x00,0x1F,0x98,0x10,0x84,0x11,0x04,0x11,0x04,0x10,0x88,0x10,0x70,0x00,0x00},/*"5",21*/
    {0x00,0x00,0x07,0xF0,0x08,0x88,0x11,0x04,0x11,0x04,0x18,0x88,0x00,0x70,0x00,0x00},/*"6",22*/
    {0x00,0x00,0x1C,0x00,0x10,0x00,0x10,0xFC,0x13,0x00,0x1C,0x00,0x10,0x00,0x00,0x00},/*"7",23*/
    {0x00,0x00,0x0E,0x38,0x11,0x44,0x10,0x84,0x10,0x84,0x11,0x44,0x0E,0x38,0x00,0x00},/*"8",24*/
    {0x00,0x00,0x07,0x00,0x08,0x8C,0x10,0x44,0x10,0x44,0x08,0x88,0x07,0xF0,0x00,0x00},/*"9",25*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x03,0x0C,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
    {0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*";",27*/
    {0x00,0x00,0x00,0x80,0x01,0x40,0x02,0x20,0x04,0x10,0x08,0x08,0x10,0x04,0x00,0x00},/*"<",28*/
    {0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x00,0x00},/*"=",29*/
    {0x00,0x00,0x10,0x04,0x08,0x08,0x04,0x10,0x02,0x20,0x01,0x40,0x00,0x80,0x00,0x00},/*">",30*/
    {0x00,0x00,0x0E,0x00,0x12,0x00,0x10,0x0C,0x10,0x6C,0x10,0x80,0x0F,0x00,0x00,0x00},/*"?",31*/
    {0x03,0xE0,0x0C,0x18,0x13,0xE4,0x14,0x24,0x17,0xC4,0x08,0x28,0x07,0xD0,0x00,0x00},/*"@",32*/
    {0x00,0x04,0x00,0x3C,0x03,0xC4,0x1C,0x40,0x07,0x40,0x00,0xE4,0x00,0x1C,0x00,0x04},/*"A",33*/
    {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x0E,0x88,0x00,0x70,0x00,0x00},/*"B",34*/
    {0x03,0xE0,0x0C,0x18,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x08,0x1C,0x10,0x00,0x00},/*"C",35*/
    {0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"D",36*/
    {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x04,0x17,0xC4,0x10,0x04,0x08,0x18,0x00,0x00},/*"E",37*/
    {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x00,0x17,0xC0,0x10,0x00,0x08,0x00,0x00,0x00},/*"F",38*/
    {0x03,0xE0,0x0C,0x18,0x10,0x04,0x10,0x04,0x10,0x44,0x1C,0x78,0x00,0x40,0x00,0x00},/*"G",39*/
    {0x10,0x04,0x1F,0xFC,0x10,0x84,0x00,0x80,0x00,0x80,0x10,0x84,0x1F,0xFC,0x10,0x04},/*"H",40*/
    {0x00,0x00,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x00,0x00,0x00,0x00},/*"I",41*/
    {0x00,0x03,0x00,0x01,0x10,0x01,0x10,0x01,0x1F,0xFE,0x10,0x00,0x10,0x00,0x00,0x00},/*"J",42*/
    {0x10,0x04,0x1F,0xFC,0x11,0x04,0x03,0x80,0x14,0x64,0x18,0x1C,0x10,0x04,0x00,0x00},/*"K",43*/
    {0x10,0x04,0x1F,0xFC,0x10,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x00},/*"L",44*/
    {0x10,0x04,0x1F,0xFC,0x1F,0x00,0x00,0xFC,0x1F,0x00,0x1F,0xFC,0x10,0x04,0x00,0x00},/*"M",45*/
    {0x10,0x04,0x1F,0xFC,0x0C,0x04,0x03,0x00,0x00,0xE0,0x10,0x18,0x1F,0xFC,0x10,0x00},/*"N",46*/
    {0x07,0xF0,0x08,0x08,0x10,0x04,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"O",47*/
    {0x10,0x04,0x1F,0xFC,0x10,0x84,0x10,0x80,0x10,0x80,0x10,0x80,0x0F,0x00,0x00,0x00},/*"P",48*/
    {0x07,0xF0,0x08,0x18,0x10,0x24,0x10,0x24,0x10,0x1C,0x08,0x0A,0x07,0xF2,0x00,0x00},/*"Q",49*/
    {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x00,0x11,0xC0,0x11,0x30,0x0E,0x0C,0x00,0x04},/*"R",50*/
    {0x00,0x00,0x0E,0x1C,0x11,0x04,0x10,0x84,0x10,0x84,0x10,0x44,0x1C,0x38,0x00,0x00},/*"S",51*/
    {0x18,0x00,0x10,0x00,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x00,0x18,0x00,0x00,0x00},/*"T",52*/
    {0x10,0x00,0x1F,0xF8,0x10,0x04,0x00,0x04,0x00,0x04,0x10,0x04,0x1F,0xF8,0x10,0x00},/*"U",53*/
    {0x10,0x00,0x1E,0x00,0x11,0xE0,0x00,0x1C,0x00,0x70,0x13,0x80,0x1C,0x00,0x10,0x00},/*"V",54*/
    {0x1F,0xC0,0x10,0x3C,0x00,0xE0,0x1F,0x00,0x00,0xE0,0x10,0x3C,0x1F,0xC0,0x00,0x00},/*"W",55*/
    {0x10,0x04,0x18,0x0C,0x16,0x34,0x01,0xC0,0x01,0xC0,0x16,0x34,0x18,0x0C,0x10,0x04},/*"X",56*/
    {0x10,0x00,0x1C,0x00,0x13,0x04,0x00,0xFC,0x13,0x04,0x1C,0x00,0x10,0x00,0x00,0x00},/*"Y",57*/
    {0x08,0x04,0x10,0x1C,0x10,0x64,0x10,0x84,0x13,0x04,0x1C,0x04,0x10,0x18,0x00,0x00},/*"Z",58*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x40,0x02,0x40,0x02,0x40,0x02,0x00,0x00},/*"[",59*/
    {0x00,0x00,0x30,0x00,0x0C,0x00,0x03,0x80,0x00,0x60,0x00,0x1C,0x00,0x03,0x00,0x00},/*"\",60*/
    {0x00,0x00,0x40,0x02,0x40,0x02,0x40,0x02,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00},/*"]",61*/
    {0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x00,0x00},/*"^",62*/
    {0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01},/*"_",63*/
    {0x00,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
    {0x00,0x00,0x00,0x98,0x01,0x24,0x01,0x44,0x01,0x44,0x01,0x44,0x00,0xFC,0x00,0x04},/*"a",65*/
    {0x10,0x00,0x1F,0xFC,0x00,0x88,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x70,0x00,0x00},/*"b",66*/
    {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x00},/*"c",67*/
    {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x11,0x08,0x1F,0xFC,0x00,0x04},/*"d",68*/
    {0x00,0x00,0x00,0xF8,0x01,0x44,0x01,0x44,0x01,0x44,0x01,0x44,0x00,0xC8,0x00,0x00},/*"e",69*/
    {0x00,0x00,0x01,0x04,0x01,0x04,0x0F,0xFC,0x11,0x04,0x11,0x04,0x11,0x00,0x18,0x00},/*"f",70*/
    {0x00,0x00,0x00,0xD6,0x01,0x29,0x01,0x29,0x01,0x29,0x01,0xC9,0x01,0x06,0x00,0x00},/*"g",71*/
    {0x10,0x04,0x1F,0xFC,0x00,0x84,0x01,0x00,0x01,0x00,0x01,0x04,0x00,0xFC,0x00,0x04},/*"h",72*/
    {0x00,0x00,0x01,0x04,0x19,0x04,0x19,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"i",73*/
    {0x00,0x00,0x00,0x03,0x00,0x01,0x01,0x01,0x19,0x01,0x19,0xFE,0x00,0x00,0x00,0x00},/*"j",74*/
    {0x10,0x04,0x1F,0xFC,0x00,0x24,0x00,0x40,0x01,0xB4,0x01,0x0C,0x01,0x04,0x00,0x00},/*"k",75*/
    {0x00,0x00,0x10,0x04,0x10,0x04,0x1F,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"l",76*/
    {0x01,0x04,0x01,0xFC,0x01,0x04,0x01,0x00,0x01,0xFC,0x01,0x04,0x01,0x00,0x00,0xFC},/*"m",77*/
    {0x01,0x04,0x01,0xFC,0x00,0x84,0x01,0x00,0x01,0x00,0x01,0x04,0x00,0xFC,0x00,0x04},/*"n",78*/
    {0x00,0x00,0x00,0xF8,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x00,0xF8,0x00,0x00},/*"o",79*/
    {0x01,0x01,0x01,0xFF,0x00,0x85,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x70,0x00,0x00},/*"p",80*/
    {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x01,0x05,0x01,0xFF,0x00,0x01},/*"q",81*/
    {0x01,0x04,0x01,0x04,0x01,0xFC,0x00,0x84,0x01,0x04,0x01,0x00,0x01,0x80,0x00,0x00},/*"r",82*/
    {0x00,0x00,0x00,0xCC,0x01,0x24,0x01,0x24,0x01,0x24,0x01,0x24,0x01,0x98,0x00,0x00},/*"s",83*/
    {0x00,0x00,0x01,0x00,0x01,0x00,0x07,0xF8,0x01,0x04,0x01,0x04,0x00,0x00,0x00,0x00},/*"t",84*/
    {0x01,0x00,0x01,0xF8,0x00,0x04,0x00,0x04,0x00,0x04,0x01,0x08,0x01,0xFC,0x00,0x04},/*"u",85*/
    {0x01,0x00,0x01,0x80,0x01,0x70,0x00,0x0C,0x00,0x10,0x01,0x60,0x01,0x80,0x01,0x00},/*"v",86*/
    {0x01,0xF0,0x01,0x0C,0x00,0x30,0x01,0xC0,0x00,0x30,0x01,0x0C,0x01,0xF0,0x01,0x00},/*"w",87*/
    {0x00,0x00,0x01,0x04,0x01,0x8C,0x00,0x74,0x01,0x70,0x01,0x8C,0x01,0x04,0x00,0x00},/*"x",88*/
    {0x01,0x01,0x01,0x81,0x01,0x71,0x00,0x0E,0x00,0x18,0x01,0x60,0x01,0x80,0x01,0x00},/*"y",89*/
    {0x00,0x00,0x01,0x84,0x01,0x0C,0x01,0x34,0x01,0x44,0x01,0x84,0x01,0x0C,0x00,0x00},/*"z",90*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x3E,0xFC,0x40,0x02,0x40,0x02},/*"{",91*/
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00},/*"|",92*/
    {0x00,0x00,0x40,0x02,0x40,0x02,0x3E,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"}",93*/
    {0x00,0x00,0x60,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00},/*"~",94*/
};

const int Font3216[11][64]  = 
{
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,    /*"0",0*/
    0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,
    0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,   /*"1",1*/
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x01,0xFF,0xFC,0x3C,0x01,0xFF,0xFC,   /*"2",2*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x3F,0xFF,0x80,0x0C,0x3F,0xFF,0x80,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x3C,0x38,0x00,0x00,0x3C,   /*"3",3*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x00,0x3F,0xFF,0x80,0x00,  /*"4",4*/
    0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
    0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x3C,0x3F,0xFF,0x80,0x3C,  /*"5",5*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0xFF,0xFC,0x30,0x01,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,  /*"6",6*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x3C,0x01,0xFF,0xFC,0x3C,0x01,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
        
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,  /*"7",7*/
    0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
    0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},    

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,  /*"8",8*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x3C,0x3F,0xFF,0x80,0x3C,  /*"9",9*/
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,0x30,0x01,0x80,0x0C,
    0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  /*":",10*/
    0x00,0x00,0x00,0x00,0x0F,0xF0,0x0F,0xF0,0x0F,0xF0,0x0F,0xF0,0x0C,0x00,0x00,0x30,
    0x0C,0x00,0x00,0x30,0x0F,0xF0,0x0F,0xF0,0x0F,0xF0,0x0F,0xF0,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};    


#include <chrono> // Для работы с временем

class FPS : public GRAY
{
public:
    // Метод для обновления счетчика FPS
    void updateFPS()
    {
        auto now = std::chrono::steady_clock::now(); // Текущее время
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(now - _lastTime).count();

        _frameCount++; // Увеличиваем счетчик кадров

        // Если прошла секунда
        if (duration >= 1000)
        {
            _fps = _frameCount; // Сохраняем количество кадров за секунду
            _frameCount = 0;    // Сбрасываем счетчик кадров
            _lastTime = now;    // Обновляем время последнего замера
        }
    }

    // Метод для получения текущего значения FPS
    int getFPS() const
    {
        return _fps;
    }

    // Метод для отрисовки FPS на экране
    void drawGrayFPS(int x, int y, GRAY::Color color)
    {
        GRAY::writeString(x, y, (String)_fps, 12, 1, color);
    }

    // void drawFps(int x, int y)
    // {
    //     GRAY::writeString(x, y, (String)_fps, 12, 1); // Отрисовываем остальные символы
    // }

private:
    int _frameCount = 0;                                                                // Счетчик кадров
    int _fps = 0;                                                                       // Текущее значение FPS
    std::chrono::steady_clock::time_point _lastTime = std::chrono::steady_clock::now(); // Время последнего замера
};

#endif